package parser

import (
	"github.com/zoulongbo/learngo/crawler/engine"
	"github.com/zoulongbo/learngo/crawler/model"
	"github.com/zoulongbo/learngo/crawler_distributed/config"
	"math/rand"
)

var surnameL = []string{"赵","钱","孙","李","周","吴","郑","王","冯","陈","褚","卫","蒋","沈","韩","杨","朱","秦","尤","许","何","吕","施","张","孔","曹","严","华","金","魏","陶","姜","戚","谢","邹","喻","柏","水","窦","章","云","苏","潘","葛","奚","范","彭","郎","鲁","韦","昌","马","苗","凤","花","方","俞","任","袁","柳","酆","鲍","史","唐","费","廉","岑","薛","雷","贺","倪","汤","滕","殷","罗","毕","郝","邬","安","常","乐","于","时","傅","皮","卞","齐","康","伍","余","元","卜","顾","孟","平","黄","和","穆","萧","尹","姚","邵","湛","汪","祁","毛","禹","狄","米","贝","明","臧","计","伏","成","戴","谈","宋","茅","庞","熊","纪","舒","屈","项","祝","董","梁","杜","阮","蓝","闵","席","季","麻","强","贾","路","娄","危","江","童","颜","郭","梅","盛","林","刁","钟","徐","邱","骆","高","夏","蔡","田","樊","胡","凌","霍","虞","万","支","柯","昝","管","卢","莫","经","房","裘","缪","干","解","应","宗","丁","宣","贲","邓","郁","单","杭","洪","包","诸","左","石","崔","吉","钮","龚","程","嵇","邢","滑","裴","陆","荣","翁","荀","羊","於","惠","甄","曲","家","封","芮","羿","储","靳","汲","邴","糜","松","井","段","富","巫","乌","焦","巴","弓","牧","隗","山","谷","车","侯","宓","蓬","全","郗","班","仰","秋","仲","伊","宫","宁","仇","栾","暴","甘","钭","厉","戎","祖","武","符","刘","景","詹","束","龙","叶","幸","司","韶","郜","黎","蓟","薄","印","宿","白","怀","蒲","邰","从","鄂","索","咸","籍","赖","卓","蔺","屠","蒙","池","乔","阴","鬱","胥","能","苍","双","闻","莘","党","翟","谭","贡","劳","逄","姬","申","扶","堵","冉","宰","郦","雍","卻","璩","桑","桂","濮","牛","寿","通","边","扈","燕","冀","郏","浦","尚","农","温","别","庄","晏","柴","瞿","阎","充","慕","连","茹","习","宦","艾","鱼","容","向","古","易","慎","戈","廖","庾","终","暨","居","衡","步","都","耿","满","弘","匡","国","文","寇","广","禄","阙","东","欧","殳","沃","利","蔚","越","夔","隆","师","巩","厍","聂","晁","勾","敖","融","冷","訾","辛","阚","那","简","饶","空","曾","毋","沙","乜","养","鞠","须","丰","巢","关","蒯","相","查","后","荆","红","游","竺","权","逯","盖","益","桓","公","万","俟","司","马","上","官","欧","阳","夏","侯","诸","葛","闻","人","东","方","赫","连","皇","甫","尉","迟","公","羊","澹","台","公","冶","宗","政","濮","阳","淳","于","单","于","太","叔","申","屠","公","孙","仲","孙","轩","辕","令","狐","钟","离","宇","文","长","孙","慕","容","鲜","于","闾","丘","司","徒","司","空","丌","官","司","寇","仉","督","子","车","颛","孙","端","木","巫","马","公","西","漆","雕","乐","正","壤","驷","公","良","拓","跋","夹","谷","宰","父","谷","梁","晋","楚","闫","法","汝","鄢","涂","钦","段","干","百","里","东","郭","南","门","呼","延","归","海","羊","舌","微","生","岳","帅","缑","亢","况","郈","有","琴","梁","丘","左","丘","东","门","西","门","商","牟","佘","佴","伯","赏","南","宫","墨","哈","谯","笪","年","爱","阳","佟","第","五","言","福","百","家","姓","终"}
var surnameLen = len(surnameL)
var nameL = []string{"梦琪","忆柳","之桃","慕青","问兰","尔岚","元香","初夏","沛菡","傲珊","曼文","乐菱","痴珊","恨玉","惜文","香寒","新柔","语蓉","海安","夜蓉","涵柏","水桃","醉蓝","春儿","语琴","从彤","傲晴","语兰","又菱","碧彤","元霜","怜梦","紫寒","妙彤","曼易","南莲","紫翠","雨寒","易烟","如萱","若南","寻真","晓亦","向珊","慕灵","以蕊","寻雁","映易","雪柳","孤岚","笑霜","海云","凝天","沛珊","寒云","冰旋","宛儿","绿真","盼儿","晓霜","碧凡","夏菡","曼香","若烟","半梦","雅绿","冰蓝","灵槐","平安","书翠","翠风","香巧","代云","梦曼","幼翠","友巧","听寒","梦柏","醉易","访旋","亦玉","凌萱","访卉","怀亦","笑蓝","春翠","靖柏","夜蕾","冰夏","梦松","书雪","乐枫","念薇","靖雁","寻春","恨山","从寒","忆香","觅波","静曼","凡旋","以亦","念露","芷蕾","千兰","新波","代真","新蕾","雁玉","冷卉","紫山","千琴","恨天","傲芙","盼山","怀蝶","冰兰","山柏","翠萱","恨松","问旋","从南","白易","问筠","如霜","半芹","丹珍","冰彤","亦寒","寒雁","怜云","寻文","乐丹","翠柔","谷山","之瑶","冰露","尔珍","谷雪","乐萱","涵菡","海莲","傲蕾","青槐","冬儿","易梦","惜雪","宛海","之柔","夏青","亦瑶","妙菡","春竹","痴梦","紫蓝","晓巧","幻柏","元风","冰枫","访蕊","南春","芷蕊","凡蕾","凡柔","安蕾","天荷","含玉","书兰","雅琴","书瑶","春雁","从安","夏槐","念芹","怀萍","代曼","幻珊","谷丝","秋翠","白晴","海露","代荷","含玉","书蕾","听白","访琴","灵雁","秋春","雪青","乐瑶","含烟","涵双","平蝶","雅蕊","傲之","灵薇","绿春","含蕾","从梦","从蓉","初丹","高朗","皓轩","嘉懿","杰伟","俊朗","雄强","雄逸","修杰","懿轩","英杰","越彬","豪健","熙华","赞美","淳雅","德海","德厚","德辉","德茂","德懋","德馨","鹤轩","立诚","明诚","明睿","明远","朗诣","明哲","伟诚","熙茂","熙泰","熙运","宣朗","宣展","雅畅","雅量","怡怿","懿轩","泽民","泽雨","嘉志","伟誉","形容","博超","博文","高俊","高卓","弘文","建功","俊豪","俊茂","俊伟","俊哲","俊智","睿渊","圣杰","晟睿","伟宸","文杰","彦博","旭尧","12","声明","哲瀚","取自","澄邈","高爽","昊然","浩皛","黎昕","明燦","明旭","明煦","明曜","鹏煊","伟博","欣欣","新曦","熠彤","越泽","泽洋","寄托","和泰","鸿涛","健柏","晋鹏","靖琪","凯泽","楷瑞","康裕","清怡","绍辉","天磊","其它","浩诚","子铭","玹霖","冠博","彦豪","泓杰","男孩","绍远","子羡","奕博","颢天","启博","博森","承颐","绍玮","熙诚","泽峻","浩铭","奎铭","峻辰","轩成","奎铭","峻辰","轩成","承峻","尚昊","宗锴","上钧","峻晨","睿新","博远","向禹","鸣予","男孩","彦辰","俊衡","昊阳","晧宇","定秋","玮扬","淑美","登治","文其","轩琪","信筠","贤如","馨成","珊德","重轩","以娟","坤禾","玟瑄","每谆","瑜淑","春香","泰霖","羽苓","颖辛","长郁","顾镬","甫羽","智阳","梓臣","尹智","妍玥","雨辰","志盟","昊妍","昊萌","智萌","阳怡","志萌","阳溢","梓涵","思语","思涵","鹏超","辰尧","俊宇","寒冰","伟宸","濛溪","宏伟","子轩","俊熙","国栋","诗语","雨诺","宇阳","子悠","洁宇","玺越","耀葳","凯漾","凯悦","凯皓","穆帆","紫阳","紫贤","梓蕴","泽桐","旭伟","苹凱","思睿","邀晨","梓镐","译晃","梓彤","传磊","碧安","可昕","馨康","婉圩","传铭","传宇","传钧","传豪","传雨","传煦","传蓄","传胜","传炎","常皓","轶群","浩成","天骐","德霞","清海","世华","洪杰","璐萌","骁骁","晓晓","传博","传霖","展博","墨含","松源","凰羽","逸霏","围围","云龙","金龙","静睿","传鑫","传泽","奕琳","传智","宇浩","传武","君浩","传硕","鑫浩","传瑞","传航","传鸿","传震","浩宇","俊杰","红亮","亭婕","国祥","亭芳","子芳","签循","坚惟","佐仪","玫嘉","茂源","旭群","辛意","音豪","鑫齐","白旺","尹吟","展映","荣秀","志元","雅定","妏枝","倩迪","薇旺","甫信","颖政","玄松","睿青","柔平","蓉雯","皓琬","雅瑞","芷福","妮苓","佩洁","旻伯","冠俐","茂成","重沛","沛青","谷凯","忠星","盈来","宣孜","坚茜","孔绍","迪淳","其雯","希芳","琬淳","志启","诚强","珮莲","胤亨","恬妤","偎镘","鸿君","芳纶","世成","坤绿","恩军","夙鑫","志绮","淳辉","盛辉","贵月","典彦","怡强","行沛","丰祯","佑美","和启","峻其","婷竹","升豪","柔东","乐勇","展哲","箍淄"}
var nameLen = len(nameL)
var gender = []string{"男","女"}

//age 就21-40取随机数
//height 160-175 随机数
//Weight  90-115 随机数
var incomeL = []string{"5000-8000元","6000-8000元","6000-9000元","7000-9000元","7000-10000元","8000-10000元","9000-10000元","1-1.5w","1.5-2w","2-3w","3-5w","5-10w","10-20w","20w+"}
var incomeLen = len(incomeL)
var marriage =[]string{"已婚","未婚","离异"}
var educationL = []string{"小学","初中","高中","大专","大学本科","研究生","博士","教授"}
var educationLen = len(educationL)
var occupationL = []string{"教师","工人","记者","演员","厨师","医生","护士","司机","军人","律师","商人","会计","店员","出纳","作家","导游","模特","警察","歌手","画家","裁缝","翻译","法官","保安","花匠","服务员","清洁工","建筑师","理发师","采购员","设计师","消防员","机修工","推销员","魔术师","模特儿","邮递员","售货员","救生员","运动员","工程师","飞行员","管理员","机械师","经纪人","审计员","漫画家","园艺师","科学家","主持人","调酒师","化妆师","音乐节","艺术家","糕点师","甜品师","运动员","外交官","舞蹈","箭术","演员","溜冰","弹钢琴","古筝手","设计师","酒吧老板","CEO","游乐园老板","机长","赛车手","跆拳道教练","运动员","兽医","特警","按摩师","报关员","客务管理","银行行员","金融业柜员","外汇交易员","旅行社业务员","导游人员","空中服务员","文物解说员","厨师","调酒员","西餐厨师","餐旅服务人员","保姆","美容理发师","美容师","保全工作人员","警察","消防工作人员","时装模特儿","售货员","商品售货员","宠物美容师","园艺作物栽培员","苗圃工","花匠","建筑师","瓷砖铺贴设计师","工程监理","人事督导","项目经理","销售","企划员","培训师","稽核","督察","销售支持","销售推动","保险","医药","前台","信托","营业员","店长","投资顾问","房地产","楼盘销售","考古","导演","歌手","舞美","导演","导师","院士","海关","报业","主编","开采","矿业","航空","飞行员","空姐","技工","IT工程师","健身教练","拳击选难受","画家","驾驶","机关","企业主","内外勤","文印","保安","厨师","娱乐","赛车保健员"}
var occupationLen = len(occupationL)
var nativeL = []string{"北京市","天津市","辽宁省沈阳市","吉林省长春市","黑龙江省哈尔滨市","上海市","江苏省南京市","湖北省武汉市","广东省广州市","重庆市","四川省成都市","陕西省西安市","河北省石家庄市","河北省唐山市","山西省太原市","内蒙包头市","辽宁省大连市","辽宁省鞍山市","  辽宁省抚顺市","吉林省吉林市","黑龙江省齐齐哈尔市","江苏省徐州市","浙江省杭州市","福建省福州市","江西省南昌市","山东省济南市","山东省青岛市","山东省淄博市","河南省郑州市","湖南省长沙市","贵州省贵阳市","云南省昆明市","甘肃省兰州市","新疆乌鲁木齐市","河北省邯郸市","河北省保定市","河北省张家口市","山西省大同市","内蒙呼和浩特市","辽宁省本溪市","辽宁省丹东市","辽宁省锦州市","辽宁省阜新市","辽宁省辽阳市","黑龙江省鸡西市","黑龙江省鹤岗市","黑龙江省大庆市","黑龙江省伊春市","黑龙江省佳木斯市","黑龙江省牡丹江市","江苏省无锡市","江苏省常州市","江苏省苏州市","浙江省宁波市","安徽省合肥市","安徽省淮南市","安徽省淮北市","福建省厦门市","山东省枣庄市","山东省烟台市","山东省潍坊市","山东省泰安市","山东省临沂市","河南省开封市","河南省洛阳市","河南省平顶山市","河南省安阳市","河南省新乡市","河南省焦作市","湖北省黄石市","湖北省襄樊市","湖北省荆州市","湖南省株洲市","湖南省湘潭市","湖南省衡阳市","广东省深圳市","广东省汕头市","广东省湛江市","广西南宁市","广西柳州市","青海省西宁市","河北省秦皇岛市","河北省邢台市","河北省承德市","河北省沧州市","河北省廊坊市","河北省衡水市","山西省阳泉市","山西省长治市","内蒙乌海市","内蒙赤峰市","辽宁省营口市","辽宁省盘锦市","辽宁省铁岭市","辽宁省朝阳市","辽宁省葫芦岛市","吉林省四平市","吉林省辽源市","吉林省通化市","吉林省白山市","吉林省松原市","吉林省白城市","黑龙江省双鸭山市","黑龙江省七台河市","江苏省南通市","江苏省连云港市","江苏省淮阴市","江苏省盐城市","江苏省扬州市","江苏省镇江市","江苏省泰州市","浙江省温州市","浙江省嘉兴市","浙江省湖州市","浙江省绍兴市","浙江省台州市","安徽省芜湖市","安徽省蚌埠市","安徽省马鞍山市","安徽省铜陵市","安徽省安庆市","安徽省阜阳市","福建省泉州市","福建省漳州市","福建省南平市","福建省龙岩市","江西省景德镇市","江西省萍乡市","江西省九江市","江西省新余市","山东省东营市","山东省济宁市","山东省威海市","山东省日照市","山东省莱芜市","山东省德州市","河南省鹤壁市","河南省濮阳市","河南省许昌市","河南省漯河市","河南省南阳市","河南省商丘市","湖北省十堰市","湖北省宜昌市","湖北省鄂州市","湖北省荆门市","湖北省孝感市","湖北省黄冈市","湖南省邵阳市","湖南省岳阳市","湖南省常德市","湖南省益阳市","湖南省郴州市","湖南省永州市","湖南省怀化市","广东省韶关市","广东省珠海市","广东省佛山市","广东省江门市","广东省茂名市","广东省肇庆市","广东省惠州市","广东省梅州市","广东省阳江市","广东省东莞市","广东省中山市","广东省潮州市","广西桂林市","广西梧州市","广西贵港市","海南省海口市","四川省自贡市","四川省攀枝花市","四川省泸州市","四川省德阳市","四川省绵阳市","四川省广元市","四川省遂宁市","四川省内江市","四川省乐山市","四川省南充市","四川省宜宾市","贵州省六盘水市","贵州省遵义市","云南省曲靖市","陕西省铜川市","陕西省宝鸡市","陕西省咸阳市","陕西省汉中市","甘肃省白银市","甘肃省天水市","宁夏银川市","宁夏石嘴山市","山西省晋城市","山西省朔州市","内蒙通辽市","黑龙江省黑河市","江苏省宿迁市","浙江省金华市","浙江省衢州市","浙江省舟山市","安徽省黄山市","安徽省滁州市","安徽省宿州市","安徽省巢湖市","安徽省六安市","福建省莆田市","福建省三明市","江西省鹰潭市","江西省赣州市","山东省聊城市","河南省三门峡市","河南省信阳市","湖北省咸宁市","湖南省张家界市","湖南省娄底市","广东省汕尾市","广东省河源市","广东省清远市","广东省揭阳市","广东省云浮市","广西北海市","广西防城港市","广西钦州市","广西玉林市","海南省三亚市","四川省达州市","云南省玉溪市","陕西省渭南市","陕西省延安市","陕西省榆林市","甘肃省嘉峪关市","甘肃省金昌市","宁夏吴忠市"}
var nativeLen = len(nativeL)
var constellationL = []string{"长蛇座","室女座","大熊座","鲸鱼座","武仙座","波江座","飞bai马座","天龙座","半人马座","宝瓶座","蛇夫座","狮子座","牧夫座","鱼座","人马座","天鹅座","金牛座","鹿豹座","仙女座","船尾座","御夫座","天鹰座","巨蛇座","英仙座","仙后座","猎户座","仙王座","天猫座","天秤座","双子座","巨蟹座","船帆座","天蝎座","船底座","麒麟座","玉夫座","凤凰座","猎犬座","白羊座","摩羯座","天炉座","后发座","大犬座","孔雀座","天鹤座","豺狼座","六分仪座","杜鹃座","印第安座","南极座","天兔座","天琴座","巨爵座","天鸽座","狐狸座","小熊座","望远镜座","时钟座","绘架座","南鱼座","水蛇座","唧筒座","天坛座","小狮座","罗盘座","显微镜座","天燕座","蝎虎座 ","海豚座","乌鸦座","小犬座","剑鱼座","北冕座","矩尺座","山案座","飞鱼座","苍蝇座","三角座 ","蝘蜓座","南冕座","雕具座 ","网罟座 ","南三角座","盾牌座  ","圆规座 ","天箭座","小马座","南十字座"}
var constellationLen = len(constellationL)
var house =[]string{"已购房","未购房","租房","计划购房"}
var car =[]string{"已购车","未购车","租车","计划购车"}

func parseProfileMock(contents []byte, url string, name string) engine.ParseResult {
	profile := model.Profile{}
	profile.Name = name
	profile.Gender = gender[rand.Intn(2)]
	profile.Age = 20 + rand.Intn(20)
	profile.Height = 160 + rand.Intn(15)
	profile.Weight = 40 + rand.Intn(20)
	profile.Income = incomeL[rand.Intn(incomeLen)]
	profile.Marriage = marriage[rand.Intn(3)]
	profile.Education = educationL[rand.Intn(educationLen)]
	profile.Occupation = occupationL[rand.Intn(occupationLen)]
	profile.Native = nativeL[rand.Intn(nativeLen)]
	profile.Constellation = constellationL[rand.Intn(constellationLen)]
	profile.House = house[rand.Intn(4)]
	profile.Car = car[rand.Intn(4)]

	result := engine.ParseResult{
		Items:[]engine.Item{
			{
				Url:url,
				Id:extractString([]byte(url), idUrlRe),
				Type:"zhenai",
				Payload:profile,
			},
		},
	}
	return result
}

func generateName() string {
	surname := surnameL[rand.Intn(surnameLen)]
	name := nameL[rand.Intn(nameLen)]
	return surname + name
}

//特殊 参数解析器方法 接口实现
type ProfileMockParser struct {
	username string
}

func (p *ProfileMockParser) Parse(contents []byte, url string) engine.ParseResult {
	return parseProfileMock(contents, url, p.username)
}

func (p *ProfileMockParser) Serialize() (name string, args interface{}) {
	return config.ProfileMockParser, p.username
}

func NewProfileMockParser(name string) *ProfileMockParser {
	return &ProfileMockParser{username:name}
}

